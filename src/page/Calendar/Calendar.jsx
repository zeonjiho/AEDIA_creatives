import React, { useState, useEffect } from 'react'
import { Calendar, momentLocalizer } from 'react-big-calendar'
import moment from 'moment'
import 'react-big-calendar/lib/css/react-big-calendar.css'
import ss from './Calendar.module.css'
import { FaSync, FaPlus, FaCalendarAlt, FaGoogle, FaTimes } from 'react-icons/fa'
import PublicCalendarService from '../../utils/publicCalendarService'
import EventModal from './components/EventModal'
import AddEventModal from './components/AddEventModal'

// moment ÌïúÍµ≠Ïñ¥ ÏÑ§Ï†ï
moment.locale('ko')
const localizer = momentLocalizer(moment)

const CalendarPage = () => {
    const [events, setEvents] = useState([])
    const [currentView, setCurrentView] = useState('month')
    const [currentDate, setCurrentDate] = useState(new Date())
    const [isLoading, setIsLoading] = useState(false)
    const [calendarStatus, setCalendarStatus] = useState(null)
    
    // ÌÜµÌï© ÌÜ†Ïä§Ìä∏ ÏÉÅÌÉú
    const [toast, setToast] = useState(null) // { type: 'loading'|'success', message: string }
    const [toastExiting, setToastExiting] = useState(false)
    
    // Î™®Îã¨ ÏÉÅÌÉú
    const [selectedEvent, setSelectedEvent] = useState(null)
    const [isEventModalOpen, setIsEventModalOpen] = useState(false)
    const [isAddModalOpen, setIsAddModalOpen] = useState(false)
    const [selectedSlot, setSelectedSlot] = useState(null)

    // ÌòÑÏû¨ ÏãúÍ∞ÑÏùÑ ÌëúÏãúÌïòÍ∏∞ ÏúÑÌïú ÏÉÅÌÉú Ï∂îÍ∞Ä
    const [currentTime, setCurrentTime] = useState(new Date())
    
    // 1Ï¥àÎßàÎã§ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
    useEffect(() => {
        const timer = setInterval(() => {
            setCurrentTime(new Date())
        }, 1000)
        
        // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
        return () => clearInterval(timer)
    }, [])

    // ÌÜ†Ïä§Ìä∏ ÏûêÎèô Ïà®ÍπÄ
    useEffect(() => {
        if (toast && toast.type === 'success') {
            const timer = setTimeout(() => {
                hideToast()
            }, 2000) // 2Ï¥à ÌõÑ ÏûêÎèô Ïà®ÍπÄ
            
            return () => clearTimeout(timer)
        }
    }, [toast])

    // ÌÜ†Ïä§Ìä∏ Ïà®Í∏∞Í∏∞ Ìï®Ïàò (Ïï†ÎãàÎ©îÏù¥ÏÖò Ìè¨Ìï®)
    const hideToast = () => {
        setToastExiting(true)
        setTimeout(() => {
            setToast(null)
            setToastExiting(false)
        }, 250) // exit Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÍ∞ÑÍ≥º ÎßûÏ∂§
    }

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Î°úÎìú
    useEffect(() => {
        loadEvents()
        checkCalendarStatus()
    }, [])

    // ÎÇ†Ïßú Î≥ÄÍ≤Ω Ïãú Ïù¥Î≤§Ìä∏ Îã§Ïãú Î°úÎìú
    useEffect(() => {
        loadEvents()
    }, [currentDate, currentView])

    // Ï∫òÎ¶∞Îçî ÏÉÅÌÉú ÌôïÏù∏
    const checkCalendarStatus = () => {
        const status = PublicCalendarService.getStatus()
        setCalendarStatus(status)
        console.log('Ï∫òÎ¶∞Îçî ÏÉÅÌÉú:', status)
    }

    // Ïù¥Î≤§Ìä∏ Î°úÎìú
    const loadEvents = async (showToast = false) => {
        setIsLoading(true)
        if (showToast) {
            setToast({ type: 'loading', message: 'Google CalendarÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...' })
        }
        
        try {
            // ÌòÑÏû¨ Î≥¥Í∏∞Ïóê Îî∞Î•∏ ÎÇ†Ïßú Î≤îÏúÑ Í≥ÑÏÇ∞
            const { start, end } = getDateRange()
            
            const loadedEvents = await PublicCalendarService.getEvents(start, end)
            setEvents(loadedEvents)
            
            console.log(`${loadedEvents.length}Í∞úÏùò Ïù¥Î≤§Ìä∏Î•º Î°úÎìúÌñàÏäµÎãàÎã§.`)
            
            // ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®Ïùº ÎïåÎßå ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ ÌëúÏãú
            if (showToast) {
                setToast({ type: 'success', message: 'ÎèôÍ∏∞Ìôî ÏôÑÎ£å!' })
            }
        } catch (error) {
            console.error('Ïù¥Î≤§Ìä∏ Î°úÎìú Ïã§Ìå®:', error)
            if (showToast) {
                setToast({ type: 'error', message: 'ÎèôÍ∏∞Ìôî Ïã§Ìå®' })
            }
        } finally {
            setIsLoading(false)
        }
    }

    // ÌòÑÏû¨ Î∑∞Ïóê Îî∞Î•∏ ÎÇ†Ïßú Î≤îÏúÑ Í≥ÑÏÇ∞
    const getDateRange = () => {
        const start = new Date(currentDate)
        const end = new Date(currentDate)

        switch (currentView) {
            case 'month':
                start.setDate(1)
                start.setHours(0, 0, 0, 0)
                end.setMonth(end.getMonth() + 1)
                end.setDate(0)
                end.setHours(23, 59, 59, 999)
                break
            case 'week':
                const startOfWeek = start.getDate() - start.getDay()
                start.setDate(startOfWeek)
                start.setHours(0, 0, 0, 0)
                end.setDate(startOfWeek + 6)
                end.setHours(23, 59, 59, 999)
                break
            case 'day':
                start.setHours(0, 0, 0, 0)
                end.setHours(23, 59, 59, 999)
                break
            default:
                // agendaÏùò Í≤ΩÏö∞ ÌòÑÏû¨ Ïõî Ï†ÑÏ≤¥
                start.setDate(1)
                start.setHours(0, 0, 0, 0)
                end.setMonth(end.getMonth() + 1)
                end.setDate(0)
                end.setHours(23, 59, 59, 999)
        }

        return { start, end }
    }

    // Ïù¥Î≤§Ìä∏ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleSelectEvent = (event) => {
        setSelectedEvent(event)
        setIsEventModalOpen(true)
    }

    // ÎÇ†Ïßú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ (ÏÉà Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±)
    const handleSelectSlot = (slotInfo) => {
        setSelectedSlot(slotInfo)
        setIsAddModalOpen(true)
    }

    // ÏÉà ÏùºÏ†ï Ï†ÄÏû• Ìï∏Îì§Îü¨
    const handleSaveNewEvent = (newEvent) => {
        setEvents([...events, newEvent])
        console.log('ÏÉà ÏùºÏ†ïÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§:', newEvent.title)
    }

    // ÏÉà ÏùºÏ†ï Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleAddEventClick = () => {
        setSelectedSlot({ 
            start: new Date(), 
            end: new Date(Date.now() + 60*60*1000),
            slots: [new Date()]
        })
        setIsAddModalOpen(true)
    }

    // ÏÉàÎ°úÍ≥†Ïπ® Ìï∏Îì§Îü¨
    const handleRefresh = () => {
        console.log('Ï∫òÎ¶∞Îçî ÏÉàÎ°úÍ≥†Ïπ® ÏãúÏûë...')
        loadEvents(true)
    }

    // Ïù¥Î≤§Ìä∏ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
    const eventStyleGetter = (event) => {
        let backgroundColor = '#3174ad'
        
        switch (event.type) {
            case 'meeting':
                backgroundColor = '#ff9800'
                break
            case 'deadline':
                backgroundColor = '#f44336'
                break
            case 'holiday':
                backgroundColor = '#4caf50'
                break
            case 'client':
                backgroundColor = '#9c27b0'
                break
            case 'user':
                backgroundColor = '#2196f3'
                break
            case 'personal':
                backgroundColor = '#00bcd4'
                break
            default:
                backgroundColor = '#3174ad'
        }

        return {
            style: {
                backgroundColor,
                borderRadius: '5px',
                opacity: 0.8,
                color: 'white',
                border: '0px',
                display: 'block'
            }
        }
    }

    // Ï∫òÎ¶∞Îçî Î©îÏãúÏßÄ ÌïúÍµ≠Ïñ¥ ÏÑ§Ï†ï
    const messages = {
        allDay: 'Ï¢ÖÏùº',
        previous: 'Ïù¥Ï†Ñ',
        next: 'Îã§Ïùå',
        today: 'Ïò§Îäò',
        month: 'Ïõî',
        week: 'Ï£º',
        day: 'Ïùº',
        agenda: 'ÏùºÏ†ï',
        date: 'ÎÇ†Ïßú',
        time: 'ÏãúÍ∞Ñ',
        event: 'Ïù¥Î≤§Ìä∏',
        noEventsInRange: 'Ìï¥Îãπ Í∏∞Í∞ÑÏóê ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.',
        showMore: (total) => `+${total} ÎçîÎ≥¥Í∏∞`
    }

    return (
        <div className={ss.calendar_container}>
            {/* Ìó§Îçî */}
            <header className={ss.dashboard_header}>
                <div className={ss.header_content}>
                    <h1 className={ss.dashboard_title}>
                        Calendar
                    </h1>
                    <p className={ss.dashboard_date}>
                        {currentTime.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        })} {currentTime.toLocaleTimeString('en-US')}
                        {calendarStatus && (
                            <span style={{ marginLeft: '0.5rem' }}>
                                {calendarStatus.isEnabled ? (
                                    <span style={{ color: '#4caf50' }}>
                                        <FaGoogle style={{ marginRight: '0.3rem' }} />
                                        Íµ¨Í∏Ä Ï∫òÎ¶∞Îçî Ïó∞Í≤∞Îê®
                                    </span>
                                ) : (
                                    <span style={{ color: '#ff9800' }}>
                                        üìã ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î™®Îìú
                                    </span>
                                )}
                            </span>
                        )}
                    </p>
                </div>
                
                <div className={ss.header_controls}>
                    <button 
                        className={ss.customize_btn}
                        onClick={handleRefresh}
                        disabled={isLoading}
                    >
                        <FaSync className={isLoading ? ss.spinning : ''} />
                        ÏÉàÎ°úÍ≥†Ïπ®
                    </button>
                    
                    <button 
                        className={`${ss.customize_btn} ${ss.save_btn}`}
                        onClick={handleAddEventClick}
                    >
                        <FaPlus />
                        ÏÉà ÏùºÏ†ï
                    </button>
                </div>
            </header>

            {/* Ïª§Ïä§ÌÖÄ Ï∫òÎ¶∞Îçî ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
            <div className={ss.calendar_navigation}>
                <div className={ss.nav_left}>
                    <button 
                        className={ss.today_btn}
                        onClick={() => setCurrentDate(new Date())}
                    >
                        Ïò§Îäò
                    </button>
                    
                    <div className={ss.nav_arrows}>
                        <button 
                            className={ss.nav_btn}
                            onClick={() => {
                                const newDate = new Date(currentDate);
                                if (currentView === 'month') {
                                    newDate.setMonth(newDate.getMonth() - 1);
                                } else if (currentView === 'week') {
                                    newDate.setDate(newDate.getDate() - 7);
                                } else {
                                    newDate.setDate(newDate.getDate() - 1);
                                }
                                setCurrentDate(newDate);
                            }}
                        >
                            ‚Üê
                        </button>
                        
                        <span className={ss.current_period}>
                            {currentView === 'month' && 
                                currentDate.toLocaleDateString('ko-KR', { year: 'numeric', month: 'long' })
                            }
                            {currentView === 'week' && 
                                `${currentDate.toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })} Ï£º`
                            }
                            {currentView === 'day' && 
                                currentDate.toLocaleDateString('ko-KR', { month: 'long', day: 'numeric', weekday: 'long' })
                            }
                        </span>
                        
                        <button 
                            className={ss.nav_btn}
                            onClick={() => {
                                const newDate = new Date(currentDate);
                                if (currentView === 'month') {
                                    newDate.setMonth(newDate.getMonth() + 1);
                                } else if (currentView === 'week') {
                                    newDate.setDate(newDate.getDate() + 7);
                                } else {
                                    newDate.setDate(newDate.getDate() + 1);
                                }
                                setCurrentDate(newDate);
                            }}
                        >
                            ‚Üí
                        </button>
                    </div>
                </div>
                
                <div className={ss.view_buttons}>
                    {['month', 'week', 'day', 'agenda'].map((view) => (
                        <button
                            key={view}
                            className={`${ss.view_btn} ${currentView === view ? ss.active : ''}`}
                            onClick={() => setCurrentView(view)}
                        >
                            {view === 'month' && 'Ïõî'}
                            {view === 'week' && 'Ï£º'}
                            {view === 'day' && 'Ïùº'}
                            {view === 'agenda' && 'Î™©Î°ù'}
                        </button>
                    ))}
                </div>
            </div>

            {/* Ï∫òÎ¶∞Îçî */}
            <div className={ss.calendar_wrapper}>
                <Calendar
                    localizer={localizer}
                    events={events}
                    startAccessor="start"
                    endAccessor="end"
                    style={{ 
                        height: window.innerWidth <= 768 
                            ? 'calc(100vh - 280px)' 
                            : 'calc(100vh - 320px)',
                        minHeight: '400px'
                    }}
                    onSelectEvent={handleSelectEvent}
                    onSelectSlot={handleSelectSlot}
                    selectable={true}
                    views={['month', 'week', 'day', 'agenda']}
                    view={currentView}
                    onView={setCurrentView}
                    date={currentDate}
                    onNavigate={setCurrentDate}
                    eventPropGetter={eventStyleGetter}
                    messages={messages}
                    popup={true}
                    step={30}
                    showMultiDayTimes={true}
                    toolbar={false}
                    formats={{
                        timeGutterFormat: 'HH:mm',
                        eventTimeRangeFormat: ({ start, end }, culture, localizer) =>
                            localizer.format(start, 'HH:mm', culture) + ' - ' + 
                            localizer.format(end, 'HH:mm', culture),
                        dayFormat: 'MM/DD dddd',
                        monthHeaderFormat: 'YYYYÎÖÑ MMÏõî',
                        dayHeaderFormat: 'MMÏõî DDÏùº dddd',
                        agendaDateFormat: 'MMÏõî DDÏùº',
                        agendaTimeFormat: 'HH:mm',
                        agendaTimeRangeFormat: ({ start, end }, culture, localizer) =>
                            localizer.format(start, 'HH:mm', culture) + ' - ' + 
                            localizer.format(end, 'HH:mm', culture)
                    }}
                />
            </div>

            {/* Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖ Î≤îÎ°Ä */}
            <div className={ss.legend}>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#ff9800'}}></span>
                    <span>ÌöåÏùò</span>
                </div>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#f44336'}}></span>
                    <span>ÎßàÍ∞êÏùº</span>
                </div>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#4caf50'}}></span>
                    <span>Ìú¥Ïùº</span>
                </div>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#9c27b0'}}></span>
                    <span>ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏</span>
                </div>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#00bcd4'}}></span>
                    <span>Í∞úÏù∏ÏùºÏ†ï</span>
                </div>
                <div className={ss.legend_item}>
                    <span className={ss.legend_color} style={{backgroundColor: '#2196f3'}}></span>
                    <span>ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä</span>
                </div>
            </div>

            {/* Ïù¥Î≤§Ìä∏ ÌÜµÍ≥Ñ */}
            {events.length > 0 && (
                <div className={ss.legend} style={{ marginTop: '1rem' }}>
                    <div className={ss.legend_item}>
                        <span>üìä Ï¥ù Ïù¥Î≤§Ìä∏: {events.length}Í∞ú</span>
                    </div>
                    <div className={ss.legend_item}>
                        <span>üîó Íµ¨Í∏Ä Ï∫òÎ¶∞Îçî: {events.filter(e => e.source === 'google').length}Í∞ú</span>
                    </div>
                    <div className={ss.legend_item}>
                        <span>üìù Î°úÏª¨ Ï∂îÍ∞Ä: {events.filter(e => e.source === 'user').length}Í∞ú</span>
                    </div>
                    <div className={ss.legend_item}>
                        <span>üïí ÌòÑÏû¨ Î≥¥Í∏∞: {currentView === 'month' ? 'ÏõîÍ∞Ñ' : currentView === 'week' ? 'Ï£ºÍ∞Ñ' : currentView === 'day' ? 'ÏùºÍ∞Ñ' : 'ÏùºÏ†ïÎ™©Î°ù'}</span>
                    </div>
                </div>
            )}

            {/* ÌÜµÌï© ÌÜ†Ïä§Ìä∏ */}
            {toast && (
                <div className={`${ss.toast} ${toastExiting ? ss.exit : ''}`}>
                    {toast.type === 'loading' && <FaSync className={ss.spinning} />}
                    {toast.type === 'success' && <FaCalendarAlt />}
                    {toast.type === 'error' && <span>‚ö†Ô∏è</span>}
                    <span>{toast.message}</span>
                    {toast.type !== 'loading' && (
                        <button 
                            className={ss.toast_close}
                            onClick={hideToast}
                        >
                            √ó
                        </button>
                    )}
                </div>
            )}

            {/* Ïù¥Î≤§Ìä∏ Î™®Îã¨ */}
            {selectedEvent && (
                <EventModal
                    event={selectedEvent}
                    isOpen={isEventModalOpen}
                    onClose={() => setIsEventModalOpen(false)}
                />
            )}

            {/* ÏÉà ÏùºÏ†ï Î™®Îã¨ */}
            {selectedSlot && (
                <AddEventModal
                    initialDate={selectedSlot.start}
                    isOpen={isAddModalOpen}
                    onClose={() => setIsAddModalOpen(false)}
                    onSave={handleSaveNewEvent}
                />
            )}
        </div>
    )
}

export default CalendarPage