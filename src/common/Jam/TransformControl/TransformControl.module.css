.TCTransformControl {
    --handle-size: calc(8px * var(--scale-factor, 1));
    --outline-width: calc(1px * var(--scale-factor, 1));
    --rotate-handle-distance: calc(24px * var(--scale-factor, 1));
    --rotate-line-height: calc(16px * var(--scale-factor, 1));
    
    position: absolute;
    pointer-events: none;
    z-index: 1000;
    outline: var(--outline-width) solid var(--selected-color, #1E90FF);
    will-change: transform, left, top, width, height;
    backface-visibility: hidden;
    perspective: 1000px;
    transition: none;
    transform: translate3d(0, 0, 0); /* GPU 가속 활성화 */
}

.TCTransformHandle {
    position: absolute;
    width: var(--handle-size);
    height: var(--handle-size);
    background: var(--selected-color, #1E90FF);
    border: calc(1px * var(--scale-factor, 1)) solid white;
    border-radius: 50%;
    pointer-events: auto;
    cursor: pointer;
    z-index: 1001;
    will-change: transform;
    backface-visibility: hidden;
    transition: transform 0.1s ease;
    transform: translate3d(0, 0, 0); /* GPU 가속 활성화 */
}

.TCTransformHandle:hover {
    transform: scale(1.2) translate3d(0, 0, 0);
}

.TCTransformHandle.nw { top: calc(-1 * var(--handle-size) / 2); left: calc(-1 * var(--handle-size) / 2); cursor: nw-resize; }
.TCTransformHandle.n { top: calc(-1 * var(--handle-size) / 2); left: 50%; transform: translateX(-50%) translate3d(0, 0, 0); cursor: n-resize; }
.TCTransformHandle.ne { top: calc(-1 * var(--handle-size) / 2); right: calc(-1 * var(--handle-size) / 2); cursor: ne-resize; }
.TCTransformHandle.w { top: 50%; left: calc(-1 * var(--handle-size) / 2); transform: translateY(-50%) translate3d(0, 0, 0); cursor: w-resize; }
.TCTransformHandle.e { top: 50%; right: calc(-1 * var(--handle-size) / 2); transform: translateY(-50%) translate3d(0, 0, 0); cursor: e-resize; }
.TCTransformHandle.sw { bottom: calc(-1 * var(--handle-size) / 2); left: calc(-1 * var(--handle-size) / 2); cursor: sw-resize; }
.TCTransformHandle.s { bottom: calc(-1 * var(--handle-size) / 2); left: 50%; transform: translateX(-50%) translate3d(0, 0, 0); cursor: s-resize; }
.TCTransformHandle.se { bottom: calc(-1 * var(--handle-size) / 2); right: calc(-1 * var(--handle-size) / 2); cursor: se-resize; }

.TCTransformHandle.n:hover, .TCTransformHandle.s:hover { transform: translateX(-50%) scale(1.2) translate3d(0, 0, 0); }
.TCTransformHandle.w:hover, .TCTransformHandle.e:hover { transform: translateY(-50%) scale(1.2) translate3d(0, 0, 0); }

.TCRotateHandle {
    position: absolute;
    top: calc(-1 * var(--rotate-handle-distance));
    left: 50%;
    transform: translateX(-50%) translate3d(0, 0, 0);
    width: var(--handle-size);
    height: var(--handle-size);
    background: var(--selected-color, #1E90FF);
    border: calc(1px * var(--scale-factor, 1)) solid white;
    border-radius: 50%;
    pointer-events: auto;
    cursor: pointer;
    z-index: 1001;
    will-change: transform;
    transition: transform 0.1s ease;
}

.TCRotateHandle:hover {
    transform: translateX(-50%) scale(1.2) translate3d(0, 0, 0);
}

.TCRotateLine {
    position: absolute;
    top: calc(-1 * var(--rotate-line-height));
    left: 50%;
    transform: translateX(-50%) translate3d(0, 0, 0);
    width: calc(1px * var(--scale-factor, 1));
    height: var(--rotate-line-height);
    background: var(--selected-color, #1E90FF);
    pointer-events: none;
    will-change: transform;
}

/* 각도 표시기 스타일 */
.TCAngleIndicator {
    position: absolute;
    top: calc(-45px * var(--scale-factor, 1));
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--selected-color, #1E90FF);
    color: white;
    padding: calc(3px * var(--scale-factor, 1)) calc(8px * var(--scale-factor, 1));
    border-radius: calc(4px * var(--scale-factor, 1));
    font-size: calc(12px * var(--scale-factor, 1));
    font-weight: bold;
    pointer-events: none;
    white-space: nowrap;
    box-shadow: 0 calc(2px * var(--scale-factor, 1)) calc(4px * var(--scale-factor, 1)) rgba(0, 0, 0, 0.3);
    z-index: 1002;
    transition: background-color 0.2s ease, transform 0.2s ease;
    opacity: 0.9;
}

/* 스냅 모드일 때 각도 표시기 스타일 */
.TCAngleIndicator.snapMode {
    background-color: #FF6B00;
    animation: pulse 1s infinite alternate;
    opacity: 1;
}

/* 스냅 힌트 스타일 */
.TCSnapHint {
    display: inline-block;
    margin-left: calc(5px * var(--scale-factor, 1));
    font-size: calc(10px * var(--scale-factor, 1));
    opacity: 0.9;
    font-weight: normal;
    border-left: calc(1px * var(--scale-factor, 1)) solid rgba(255, 255, 255, 0.5);
    padding-left: calc(5px * var(--scale-factor, 1));
}

/* 비율 유지 힌트 스타일 */
.TCAspectRatioHint {
    position: absolute;
    background-color: #FF6B00;
    color: white;
    padding: calc(3px * var(--scale-factor, 1)) calc(8px * var(--scale-factor, 1));
    border-radius: calc(4px * var(--scale-factor, 1));
    font-size: calc(12px * var(--scale-factor, 1));
    font-weight: bold;
    pointer-events: none;
    white-space: nowrap;
    box-shadow: 0 calc(2px * var(--scale-factor, 1)) calc(4px * var(--scale-factor, 1)) rgba(0, 0, 0, 0.3);
    z-index: 1002;
}

/* 사이즈 표시기 옆에 위치한 비율 유지 힌트 */
.TCNextToSize {
    bottom: calc(-30px * var(--scale-factor, 1));
    right: calc(100% + 10px * var(--scale-factor, 1));
    left: auto;
    transform: none;
}

/* 왼쪽 하단에 위치한 비율 유지 힌트 */
.TCBottomLeft {
    top: auto;
    left: 0;
    bottom: calc(-30px * var(--scale-factor, 1));
    transform: none;
}

/* 펄스 애니메이션 */
@keyframes pulse {
    from {
        opacity: 0.85;
        transform: translateX(-50%);
    }
    to {
        opacity: 1;
        transform: translateX(-50%) scale(1.05);
    }
}

/* 사이즈 표시기 스타일 */
.TCSizeIndicator {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: calc(4px * var(--scale-factor, 1)) calc(8px * var(--scale-factor, 1));
    border-radius: calc(4px * var(--scale-factor, 1));
    font-size: calc(12px * var(--scale-factor, 1));
    font-weight: bold;
    pointer-events: none;
    white-space: nowrap;
    box-shadow: 0 calc(2px * var(--scale-factor, 1)) calc(4px * var(--scale-factor, 1)) rgba(0, 0, 0, 0.2);
    z-index: 1002;
    opacity: 0.9;
    letter-spacing: 0.5px;
    border: calc(1px * var(--scale-factor, 1)) solid rgba(255, 255, 255, 0.2);
    transition: transform 0.15s ease, background-color 0.15s ease;
}

/* 우측 하단에 위치한 사이즈 표시기 */
.TCBottomRight {
    top: auto;
    left: auto;
    bottom: calc(-30px * var(--scale-factor, 1));
    right: 0;
    transform: none;
}

/* 드래그 중일 때 사이즈 표시기 스타일 */
.TCTransformControl:active .TCSizeIndicator {
    background-color: var(--selected-color, #1E90FF);
    opacity: 1;
}

/* 활성 드래그 중일 때 사이즈 표시기 스타일 */
.TCActiveDrag {
    background-color: var(--selected-color, #1E90FF);
    opacity: 1;
    box-shadow: 0 calc(3px * var(--scale-factor, 1)) calc(8px * var(--scale-factor, 1)) rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.4);
}

/* 우측 하단 활성 드래그 시 스타일 */
.TCBottomRight.TCActiveDrag {
    transform: scale(1.1);
}

/* 사이즈 값 스타일 */
.TCSizeValue {
    display: inline-block;
    min-width: calc(24px * var(--scale-factor, 1));
    text-align: center;
}

/* 사이즈 구분자 스타일 */
.TCSizeSeparator {
    display: inline-block;
    margin: 0 calc(4px * var(--scale-factor, 1));
    opacity: 0.7;
    font-weight: normal;
}

/* 사이즈 단위 스타일 */
.TCSizeUnit {
    display: inline-block;
    margin-left: calc(2px * var(--scale-factor, 1));
    font-size: calc(10px * var(--scale-factor, 1));
    opacity: 0.7;
    font-weight: normal;
} 